name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/cloud-image-server
  DOCKER_TAG: latest
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN}}
  MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME}}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD}}
  SPRING_PROFILES_ACTIVE: prod


jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'zulu'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -Dspring.profiles.active=prod

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }},${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_REGION }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 환경 변수 설정
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME}}" >> .env
            
            # Docker Compose 파일 복사
            cat > docker-compose.yml << 'EOL'
            version: '3.8'
            
            services:
              app:
                image: ${DOCKER_USERNAME}/cloud-image-server:latest
                container_name: cloud-image-server
                ports:
                  - "80:8080"
                volumes:
                  - ./upload:/app/upload
                environment:
                  - SPRING_DATASOURCE_URL=jdbc:mysql://cloud-image-mysql:3306/cloud_image?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
                  - SPRING_DATASOURCE_USERNAME=${MYSQL_USERNAME}
                  - SPRING_DATASOURCE_PASSWORD=${MYSQL_ROOT_PASSWORD}
                  - ACTIVE_PROFILE=prod
                depends_on:
                  - mysql
                restart: unless-stopped
            
              mysql:
                image: mysql:8.0
                container_name: cloud-image-mysql
                ports:
                  - "3306:3306"
                environment:
                  - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
                  - MYSQL_DATABASE=cloud_image
                volumes:
                  - mysql-data:/var/lib/mysql
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                restart: unless-stopped
            
            volumes:
              mysql-data:
            EOL
            
            # Docker Hub 로그인
            echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Docker Compose로 서비스 시작
            docker-compose down --rmi all
            docker-compose pull
            docker-compose up -d