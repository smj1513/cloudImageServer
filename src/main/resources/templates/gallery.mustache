<!DOCTYPE html>
<html>
<head>
    {{> layout/_head}} <!-- layout 폴더의 _head.mustache 파일을 포함 -->
    <!-- Font Awesome CDN (아이콘 사용을 위해 추가) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* --- (CSS 스타일은 이전과 동일하게 유지하거나 필요에 따라 수정) --- */
        .upload-button-section {
            margin-bottom: 20px;
        }

        .upload-button-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 100%;
            height: 220px;
            border: 2px dashed #007bff;
            border-radius: .25rem;
            background-color: #f8f9fa;
            color: #007bff;
            cursor: pointer;
            transition: background-color 0.3s ease, border-color 0.3s ease;
            text-align: center;
            padding: 15px;
            position: relative; /* 로딩 스피너 위치를 위해 추가 */
        }

        .upload-button-container:hover {
            background-color: #e9ecef;
            border-color: #0056b3;
        }

        .upload-button-container.uploading { /* 업로드 중일 때 스타일 */
            cursor: not-allowed;
            background-color: #e9ecef;
        }

        .upload-button-container .spinner { /* 로딩 스피너 스타일 */
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .upload-button-container i {
            font-size: 3rem;
            margin-bottom: 0.5rem;
        }

        .upload-button-container span {
            font-size: 1.1rem;
            font-weight: 500;
        }

        #selectedFilesList {
            margin-top: 10px;
            font-size: 0.9rem;
        }
        #selectedFilesList .list-group-item {
            padding: 0.5rem 1rem;
        }

        .gallery-container {
            margin-top: 20px;
        }

        .gallery-item {
            margin-bottom: 30px;
        }

        .card-img-top {
            width: 100%;
            height: 220px;
            object-fit: cover;
        }

        .card-body {
            text-align: center;
        }

        /* 알림 메시지 스타일 (선택 사항) */
        .upload-feedback {
            margin-top: 10px;
            padding: 10px;
            border-radius: .25rem;
            display: none; /* 기본 숨김 */
        }
        .upload-feedback.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .upload-feedback.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
{{> layout/_nav}}

<div class="container gallery-container">
    <div class="row">
        <div class="col-lg-3 col-md-4 upload-button-section">
            <div class="upload-button-container" id="customUploadButton">
                <i class="fas fa-cloud-upload-alt"></i>
                <span>파일 선택하여 업로드</span>
            </div>
            <!-- 파일 입력 요소는 보이지 않게 처리 -->
            <input type="file" id="fileUploadInput" name="imageFiles" multiple style="display: none;" accept="image/*">
            <!-- 선택된 파일 목록 또는 업로드 상태 메시지 표시 영역 -->
            <div id="selectedFilesList" class="mt-2"></div>
            <div id="uploadFeedback" class="upload-feedback"></div> <!-- 업로드 결과 피드백 -->
        </div>

        <div class="col-lg-9 col-md-8">
            <div class="row">
                {{#images}}
                    <div class="col-lg-4 col-md-6 gallery-item">
                        <div class="card">
                            <img src="https://kit-cloud-image.s3.ap-northeast-2.amazonaws.com/{{path}}" class="card-img-top" alt="Uploaded image">
                            <div class="card-body">
                                <p class="card-text">{{name}}</p>
                            </div>
                        </div>
                    </div>
                {{/images}}
                {{^images}}
                    <div class="col">
                        <p>표시할 이미지가 없습니다. 파일을 업로드해주세요.</p>
                    </div>
                {{/images}}
            </div>
        </div>
    </div>
</div>

{{> layout/_scripts}}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const customUploadButton = document.getElementById('customUploadButton');
        const fileUploadInput = document.getElementById('fileUploadInput');
        const selectedFilesListDiv = document.getElementById('selectedFilesList');
        const uploadFeedbackDiv = document.getElementById('uploadFeedback');
        const originalButtonContent = customUploadButton.innerHTML; // 초기 버튼 내용 저장

        if (customUploadButton && fileUploadInput) {
            customUploadButton.addEventListener('click', function() {
                // 업로드 중이 아닐 때만 파일 선택 창 열기
                if (!customUploadButton.classList.contains('uploading')) {
                    fileUploadInput.click();
                }
            });

            fileUploadInput.addEventListener('change', async function(event) {
                const files = event.target.files;
                if (files.length === 0) {
                    selectedFilesListDiv.innerHTML = '<p class="text-muted small">선택된 파일이 없습니다.</p>';
                    hideFeedback();
                    return;
                }

                // 선택된 파일 목록 표시 (간단하게)
                let fileNames = Array.from(files).map(file => file.name).join(', ');
                selectedFilesListDiv.innerHTML = `<p class="text-info small">선택된 파일: ${fileNames}</p>`;

                // 바로 업로드 시작
                await uploadFiles(files);

                // 파일 입력 필드 초기화 (다시 같은 파일 선택 가능하도록)
                fileUploadInput.value = '';
            });
        }

        async function uploadFiles(files) {
            const formData = new FormData();
            for (let i = 0; i < files.length; i++) {
                // 'imageFiles'는 서버에서 받을 때 사용할 필드명입니다.
                // 서버의 Controller에서 @RequestParam("imageFiles") 등으로 받게 됩니다.
                formData.append('imageFiles', files[i]);
            }

            // 업로드 중 UI 변경
            customUploadButton.classList.add('uploading');
            customUploadButton.innerHTML = '<i class="fas fa-spinner fa-spin spinner"></i> <span>업로드 중...</span>';
            hideFeedback(); // 이전 피드백 숨기기

            try {
                const response = await fetch('/upload', { // 요청 경로
                    method: 'POST',
                    body: formData,
                    // headers: {} // FormData 사용 시 'Content-Type': 'multipart/form-data'는 브라우저가 자동 설정
                });

                if (response.ok) {
                    // 서버에서 성공 응답으로 JSON 데이터를 보낸다고 가정 (예: 업로드된 파일 정보)
                    // const result = await response.json();
                    // console.log('Upload successful:', result);
                    showFeedback('파일이 성공적으로 업로드되었습니다!', 'success');

                    // 성공 후 페이지를 새로고침하여 갱신된 이미지 리스트를 보여줍니다.
                    // 더 나은 UX를 위해서는 서버 응답을 바탕으로 DOM을 직접 조작하여 이미지 목록을 업데이트 할 수 있습니다.
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500); // 1.5초 후 새로고침

                } else {
                    const errorData = await response.text(); // 서버 에러 메시지
                    console.error('Upload failed:', response.status, response.statusText, errorData);
                    showFeedback(`업로드 실패: ${response.statusText} (서버: ${errorData || '오류 발생'})`, 'error');
                }
            } catch (error) {
                console.error('Error uploading files:', error);
                showFeedback('파일 업로드 중 네트워크 오류 또는 클라이언트 측 오류가 발생했습니다.', 'error');
            } finally {
                // 업로드 완료 후 UI 복원
                customUploadButton.classList.remove('uploading');
                customUploadButton.innerHTML = originalButtonContent; // 원래 버튼 내용으로 복원
                // selectedFilesListDiv.innerHTML = ''; // 파일 목록은 새로고침 전까지 유지하거나, 여기서 지울 수 있음
            }
        }

        function showFeedback(message, type) {
            uploadFeedbackDiv.textContent = message;
            uploadFeedbackDiv.className = `upload-feedback ${type}`; // success 또는 error 클래스 추가
            uploadFeedbackDiv.style.display = 'block';
        }

        function hideFeedback() {
            uploadFeedbackDiv.style.display = 'none';
            uploadFeedbackDiv.textContent = '';
            uploadFeedbackDiv.className = 'upload-feedback';
        }
    });
</script>
</body>
</html>
