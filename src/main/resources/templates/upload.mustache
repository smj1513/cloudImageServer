<style>
    /* 페이지 전용 스타일 */
    .upload-card .card {
        border: none; /* 카드 테두리 제거하고 그림자로만 구분 */
        border-radius: 0.75rem; /* 카드 모서리 둥글게 */
    }

    .upload-card .card-header {
        background-color: #fff; /* 헤더 배경색 */
        border-bottom: 1px solid #f0f0f0; /* 부드러운 구분선 */
    }

    .upload-card .card-header h3 {
        font-weight: 500; /* 헤더 폰트 두께 */
        color: #0d6efd; /* 헤더 텍스트 기본 Primary 색상 */
    }

    .upload-preview-container {
        border: 2px dashed #ced4da; /* 점선 테두리 */
        border-radius: .5rem;
        padding: 2.5rem 1.5rem;
        text-align: center;
        cursor: pointer;
        transition: border-color .2s ease-in-out, background-color .2s ease-in-out;
        min-height: 220px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: #f8f9fa;
        position: relative;
    }

    .upload-preview-container.dragover {
        border-color: #0d6efd;
        background-color: #e9f2ff;
    }

    .upload-preview-placeholder i {
        color: #adb5bd;
        font-size: 3.2rem; /* 아이콘 크기 */
    }
    .upload-preview-placeholder p {
        font-size: 1.05rem;
        color: #495057; /* 텍스트 색상 */
        margin-top: 0.75rem;
        margin-bottom: 0.25rem;
    }
    .upload-preview-placeholder .form-text { /* 파일 형식 안내 */
        font-size: 0.85rem;
    }

    .uploaded-image-preview {
        max-width: 100%;
        max-height: 200px;
        object-fit: contain;
        border-radius: .375rem;
        box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,.075);
        margin-top: 1rem; /* 플레이스홀더 대신 이미지가 나올 때 상단 마진 */
    }

    /* JS를 통해 제어될 클래스 */
    .upload-preview-container.has-image .upload-preview-placeholder {
        display: none;
    }

    .upload-preview-container .uploaded-image-preview:not([src="#"]) {
        display: block;
    }

    .upload-preview-container .uploaded-image-preview[src="#"] {
        display: none;
    }

    /* 커스텀 파일 입력 그룹 스타일 */
    .custom-file-input-group {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: .375rem; /* Bootstrap form-control과 유사한 radius */
        background-color: #fff;
        padding: 0.25rem; /* 내부 패딩 */
        padding-left: 0.75rem;
    }

    .custom-file-input-group .btn-file-select {
        flex-shrink: 0; /* 버튼 크기 고정 */
        font-size: 0.9rem; /* 버튼 폰트 크기 */
        padding: 0.375rem 0.75rem; /* 버튼 패딩 */
    }

    #fileNameDisplay {
        font-size: 0.9em;
        color: #495057;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        flex-grow: 1; /* 남은 공간 차지 */
        margin-left: 0.75rem; /* 버튼과의 간격 */
        line-height: 1.5; /* 버튼과 수직 정렬을 위해 */
    }

    /* 업로드 버튼 스타일 */
    .btn-upload {
        padding-top: 0.85rem;
        padding-bottom: 0.85rem;
        font-size: 1.05rem;
        font-weight: 500; /* 폰트 두께 */
    }

</style>

<div class="upload-card">
    <div class="card shadow-lg"> {{! 그림자 강조 }}
        <div class="card-header pt-3 pb-2">
            <h3 class="text-center mb-0 h5">
                <i class="fas fa-cloud-upload-alt me-2 text-primary"></i>이미지 업로드
            </h3>
        </div>
        <div class="card-body p-lg-5 p-4"> {{! 반응형 패딩 }}
            <form action="/upload" method="post" enctype="multipart/form-data" id="uploadForm">

                <div class="upload-preview-container mb-4" id="uploadPreviewContainer"> {{! 하단 마진 증가 }}
                    <div class="upload-preview-placeholder">
                        <i class="fas fa-image fa-3x mb-3"></i>
                        <p class="mb-1">이미지를 드래그하거나 여기를 클릭하세요</p>
                        <small class="form-text text-muted">지원 형식: JPG, PNG, GIF (최대 5MB)</small>
                    </div>
                    <img src="#" alt="미리보기 이미지" class="uploaded-image-preview" id="imagePreview">
                </div>

                <div class="mb-4 custom-file-input-group"> {{! 하단 마진 증가 }}
                    {{! 숨겨진 실제 파일 입력 }}
                    <input type="file" class="d-none" id="fileInput" name="file" accept="image/*" required>
                    {{! 커스텀 파일 선택 버튼 (label 활용) }}
                    <label for="fileInput" class="btn btn-outline-primary btn-file-select">
                        <i class="fas fa-paperclip me-2"></i>파일 선택
                    </label>
                    {{! 선택된 파일명 표시 }}
                    <span id="fileNameDisplay" class="text-muted">선택된 파일 없음</span>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-upload">
                        <span class="submit-text">
                            <i class="fas fa-rocket me-2"></i>업로드 시작
                        </span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                        <span class="loading-text d-none">업로드 중...</span>
                    </button>
                </div>
            </form>
        </div>
        <div class="card-footer bg-light text-center py-3">
            <small class="text-muted">
                <i class="fas fa-lock me-1"></i> 여러분의 이미지는 안전하게 처리됩니다.
            </small>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const uploadForm = document.getElementById('uploadForm');
        const fileInput = document.getElementById('fileInput');
        const uploadPreviewContainer = document.getElementById('uploadPreviewContainer');
        const imagePreview = document.getElementById('imagePreview');
        const fileNameDisplay = document.getElementById('fileNameDisplay');
        const submitButton = uploadForm.querySelector('button[type="submit"]');
        const submitText = submitButton.querySelector('.submit-text');
        const loadingSpinner = submitButton.querySelector('.spinner-border');
        const loadingText = submitButton.querySelector('.loading-text');


        // 파일 입력 변경 시 미리보기 업데이트 및 파일명 표시
        fileInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            updateFileInfo(file);
        });

        function updateFileInfo(file) {
            if (file) {
                fileNameDisplay.textContent = file.name;
                fileNameDisplay.classList.remove('text-muted'); // 파일 선택 시 텍스트 색상 변경
                displayImagePreview(file);
            } else {
                fileNameDisplay.textContent = '선택된 파일 없음';
                fileNameDisplay.classList.add('text-muted');
                displayImagePreview(null);
            }
        }

        // 클릭하여 파일 선택창 열기 (프리뷰 영역)
        uploadPreviewContainer.addEventListener('click', () => {
            fileInput.click();
        });

        // 드래그 앤 드롭 기능
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadPreviewContainer.addEventListener(eventName, preventDefaults, false);
            // document.body에 대한 이벤트는 불필요할 수 있으므로, 필요시 주석 해제
            // document.body.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadPreviewContainer.addEventListener(eventName, () => {
                uploadPreviewContainer.classList.add('dragover');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadPreviewContainer.addEventListener(eventName, () => {
                uploadPreviewContainer.classList.remove('dragover');
            }, false);
        });

        uploadPreviewContainer.addEventListener('drop', (event) => {
            const dt = event.dataTransfer;
            const files = dt.files;

            if (files.length > 0) {
                fileInput.files = files; // 드롭된 파일을 input에 할당
                updateFileInfo(files[0]); // 파일 정보 업데이트 및 미리보기
            }
        });

        // 이미지 미리보기 표시 함수
        function displayImagePreview(file) {
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imagePreview.src = e.target.result;
                    uploadPreviewContainer.classList.add('has-image');
                }
                reader.readAsDataURL(file);
            } else {
                imagePreview.src = '#';
                uploadPreviewContainer.classList.remove('has-image');
                if (file) { // 파일은 있지만 이미지가 아닌 경우
                    alert("이미지 파일(JPG, PNG, GIF 등)만 선택해주세요.");
                    fileInput.value = ""; // 파일 입력 초기화
                    updateFileInfo(null); // 파일 정보 초기화
                }
            }
        }

        // 폼 제출 시 로딩 상태 표시
        uploadForm.addEventListener('submit', function(event) {
            // 간단한 유효성 검사
            if (fileInput.files.length === 0) {
                alert('업로드할 이미지를 선택해주세요.');
                event.preventDefault();
                return;
            } else if (!fileInput.files[0].type.startsWith('image/')) {
                alert('이미지 파일만 업로드 가능합니다.');
                event.preventDefault();
                return;
            }

            submitButton.disabled = true;
            submitText.classList.add('d-none');
            loadingSpinner.classList.remove('d-none');
            loadingText.classList.remove('d-none');

            // 실제 업로드 로직 처리 후 (성공 또는 실패 시) 아래 코드로 버튼 상태 복원
            // 예시: 3초 후 복원
            // setTimeout(() => {
            //     submitButton.disabled = false;
            //     submitText.classList.remove('d-none');
            //     loadingSpinner.classList.add('d-none');
            //     loadingText.classList.add('d-none');
            //
            //     // 폼 초기화
            //     uploadForm.reset(); // 폼의 모든 필드를 초기화
            //     updateFileInfo(null); // 파일 관련 UI도 초기화
            //     alert('업로드 완료! (가상)');
            // }, 3000);
            // event.preventDefault(); // 실제 서버 전송을 막기 위한 테스트용 코드
        });
    });
</script>
